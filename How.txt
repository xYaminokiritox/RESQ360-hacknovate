# How to Run RESQ360 Project by CTRL ALT ELITES

## Setup & Installation (Required Steps)

1. **Prerequisites**:
   - Node.js (v14.0.0 or newer)
   - npm (v6.0.0 or newer)
   - Git

2. **Clone the repository**:
   ```bash
   git clone https://github.com/yourusername/RESQ360-hacknovate.git
   cd RESQ360-hacknovate
   ```

3. **Install dependencies**:
   ```bash
   # Install main project dependencies
   npm install
   
   # Install server dependencies
   cd server
   npm install
   cd ..
   ```

4. **Set up environment variables**:

   Create a `.env` file in the project root directory with the following variables:
   ```
   VITE_FIREBASE_API_KEY=your_firebase_api_key
   VITE_FIREBASE_AUTH_DOMAIN=your_firebase_auth_domain
   VITE_FIREBASE_PROJECT_ID=your_firebase_project_id
   VITE_FIREBASE_STORAGE_BUCKET=your_firebase_storage_bucket
   VITE_FIREBASE_MESSAGING_SENDER_ID=your_firebase_messaging_sender_id
   VITE_FIREBASE_APP_ID=your_firebase_app_id
   VITE_GEMINI_API_KEY=your_gemini_api_key
   ```

   Create a `.env` file in the `server` directory with the following variables:
   ```
   NODEMAILER_GMAIL=your_email@gmail.com
   NODEMAILER_PASS=your_app_password
   PORT=5000
   ```
   
   Note: For Gmail, you'll need to generate an app password in your Google Account security settings.

5. **Firebase Setup**:
   - Create a Firebase project at https://console.firebase.google.com/
   - Enable Authentication (Email/Password provider)
   - Create a Firestore database
   - Update your Firebase configuration in the .env file

6. **Google Gemini API Setup**:
   - Get a Google Gemini API key from https://ai.google.dev/
   - Add your Gemini API key to the .env file

## Running the Application

1. **Development mode**:
   ```bash
   # Run both frontend and backend concurrently
   npm run dev
   
   # Or run them separately:
   # Frontend only
   npm run dev:frontend
   
   # Backend only
   npm run dev:backend
   ```

2. **Build for production**:
   ```bash
   npm run build
   ```

3. **Accessing the application**:
   - Frontend: http://localhost:5173
   - Backend API: http://localhost:5000

## Sample Data

To populate the application with sample data (included in the project), navigate to:
1. Go to `/sample-data` in the application
2. Click the "Add All Sample Data" button
3. This will add sample alerts, trusted contacts, forum posts, and emergency responses to your Firebase database

## Troubleshooting

- If you encounter CORS issues, make sure your server is running on port 5000
- If email alerts are not working, check your NODEMAILER_GMAIL and NODEMAILER_PASS in the server/.env file
- If Firebase operations fail, verify your Firebase configuration in the .env file

---

# How We Made RESQ360: A Step-by-Step Journey

## 1. Problem Identification & Research (Week 1)

- Identified the gap between traditional emergency services and modern technology
- Researched existing safety applications and their limitations
- Conducted user interviews to understand safety concerns in different communities
- Analyzed emergency response patterns and identified areas for improvement
- Defined our target audience: general public with focus on vulnerable communities
- Established key metrics for success: response time, user engagement, offline availability

## 2. Conceptualization & Planning (Week 1-2)

- Brainstormed potential features and created a feature priority matrix
- Developed user personas to guide our design decisions
- Created user stories and journey maps for different emergency scenarios
- Defined the core value proposition: "Safety resources accessible to everyone"
- Established project timeline and allocated resources
- Set up project management board with task assignments

## 3. Technology Selection (Week 2)

- Evaluated various tech stacks based on requirements:
  * Need for real-time updates → Firebase Firestore
  * Offline functionality → Progressive Web App architecture
  * AI assistance → Google Gemini API
  * Cross-platform compatibility → React and TypeScript
- Selected React + TypeScript for frontend development due to strong typing and component reusability
- Chose Firebase for backend due to real-time database capabilities and serverless architecture
- Decided on Tailwind CSS for rapid UI development
- Selected Framer Motion for smooth animations and interactions
- Integrated Leaflet for mapping functionality
- Configured Nodemailer for email alerting system

## 4. Design & Prototyping (Week 2-3)

- Created mood boards and design system with dark-themed UI for better visibility in emergencies
- Designed low-fidelity wireframes for key screens
- Developed high-fidelity mockups in Figma
- Created interactive prototypes for user testing
- Established color scheme: primary purple with high-contrast elements for accessibility
- Designed custom icons for different alert types
- Created responsive layouts for mobile, tablet, and desktop views
- Conducted usability testing with potential users and iterated on designs

## 5. Frontend Development (Week 3-5)

- Set up React project with TypeScript configuration
- Implemented component architecture and folder structure
- Created reusable UI components:
  * Alert cards and lists
  * Interactive map
  * Emergency button
  * Form components
  * Modal windows
- Developed page layouts and navigation system
- Implemented state management using React Context API
- Added animations and transitions using Framer Motion
- Created authentication flows and user profile pages
- Built responsive design using Tailwind CSS
- Implemented client-side form validation
- Added accessibility features (ARIA attributes, keyboard navigation, screen reader support)

## 6. Backend Implementation (Week 3-5)

- Set up Firebase project and configured security rules
- Designed database schema for Firestore
- Created authentication system with Firebase Auth
- Implemented real-time data synchronization
- Set up Firebase Cloud Functions for server-side logic
- Developed API endpoints for alert notifications
- Configured Nodemailer for email alerts
- Implemented data validation and sanitization
- Set up server-side caching for performance optimization

## 7. AI Integration (Week 4-5)

- Obtained API key for Google Gemini
- Designed conversation flows for the safety assistant
- Created prompt templates for common emergency scenarios
- Implemented API client for Gemini
- Built caching system for offline AI responses
- Developed fallback mechanisms for when AI is unavailable
- Created response formatting and rendering system
- Implemented feedback loop for AI response quality

## 8. Map & Geolocation Features (Week 4-5)

- Integrated Leaflet maps library
- Implemented user location detection
- Created custom map markers for different alert types
- Built clustering system for multiple alerts in the same area
- Added filtering capabilities by alert type and severity
- Implemented address geocoding and reverse geocoding
- Created safe zone mapping and directions
- Added offline map capabilities with cached tiles

## 9. Offline Functionality (Week 5-6)

- Configured service worker for Progressive Web App
- Implemented caching strategies for different assets
- Created offline-first user experience
- Built sync system for when connection is restored
- Cached critical safety information locally
- Implemented offline form submission queue
- Added background sync functionality
- Created user notifications for offline/online status

## 10. Testing & Quality Assurance (Week 6)

- Developed unit tests for critical components
- Performed integration testing for key user flows
- Conducted cross-browser compatibility testing
- Tested on various devices and screen sizes
- Performed performance optimization
- Conducted accessibility audits
- Tested offline functionality
- Fixed bugs and edge cases

## 11. Deployment & CI/CD (Week 6-7)

- Set up GitHub repository with version control
- Configured CI/CD pipeline
- Deployed frontend to Vercel
- Set up Firebase hosting for API endpoints
- Configured domain and SSL certificates
- Implemented monitoring and error logging
- Set up automated backups for database
- Created deployment documentation

## 12. Final Touches & Launch Preparation (Week 7)

- Conducted final user acceptance testing
- Created user documentation and help guides
- Recorded demo videos for key features
- Prepared pitch presentation for hackathon
- Finalized README documentation
- Addressed last-minute feedback
- Optimized performance metrics
- Prepared launch announcement

## 13. Challenges & Solutions

- **Challenge**: Ensuring reliable emergency alerts delivery
  **Solution**: Implemented redundant notification systems (email, in-app, push)

- **Challenge**: Making the app work offline
  **Solution**: Used service workers and local caching strategies

- **Challenge**: Integrating AI without dependencies on internet
  **Solution**: Created pre-cached responses for common emergencies

- **Challenge**: Handling location data accurately
  **Solution**: Implemented multiple fallbacks and manual location entry

- **Challenge**: Ensuring cross-platform compatibility
  **Solution**: Used responsive design and progressive enhancement

## 14. Lessons Learned

- Start testing with real users early in the development process
- Design for the worst-case scenario (no internet, low battery)
- Emergency systems need multiple redundancies
- Accessibility is not optional, especially for emergency applications
- Simple, clear UI is critical during stressful situations
- Performance optimization is essential for emergency response apps
- Data privacy concerns must be addressed from the beginning

## 15. Future Improvements

- Add SMS notification capabilities
- Implement push notifications
- Expand language support for international users
- Integrate with official emergency services APIs
- Add voice command functionality
- Implement machine learning for alert prioritization
- Create native mobile applications
- Add augmented reality for location guidance
- Implement blockchain for immutable emergency records 

## 16. Sample Implementation Details

### Real-world Testing Scenario: ABESIT Ghaziabad Campus

To ensure RESQ360's effectiveness in real-world emergency situations, we conducted a comprehensive test scenario at ABESIT Ghaziabad Campus. This allowed us to validate our alert system, geolocation features, and emergency response coordination in a controlled environment.

#### Fire Alert Simulation

We simulated a fire emergency in the computer lab building with the following scenario details:
- **Location**: ABESIT Campus, NH-24, Vijay Nagar, Ghaziabad (Latitude: 28.6822552, Longitude: 77.4842057)
- **Incident Type**: Fire, High Severity
- **Description**: "Fire reported in the computer lab building. Smoke visible from third floor. Fire department notified. All students and staff advised to evacuate immediately using emergency exits."
- **Response Teams**: Campus Security (on-scene) and Ghaziabad Fire Department (dispatched)

The alert notification successfully triggered:
1. Real-time updates on the interactive map
2. Email notifications to trusted contacts
3. Evacuation route guidance
4. Status updates as the situation evolved

#### Trusted Contacts Implementation

We implemented a robust trusted contacts system that allows users to designate emergency contacts who will receive alerts. For our testing, we created sample contacts including:

```
[
  {
    "name": "Aryan",
    "type": "email",
    "value": "aryansaini2004feb@gmail.com"
  },
  {
    "name": "Ravi Kumar",
    "type": "phone",
    "value": "9876543210"
  },
  {
    "name": "Campus Security",
    "type": "phone",
    "value": "1800123456"
  }
]
```

When the test alert was triggered, the system:
1. Generated personalized email notifications with the alert details
2. Included a Google Maps link with precise coordinates (28.6822552, 77.4842057)
3. Provided real-time status updates as the situation evolved
4. Allowed two-way communication between the alert sender and contacts

#### Community Forum Implementation

To foster community awareness and communication, we created a forum focused on campus safety. Sample discussions included:

1. **Thread**: "Safety concerns around ABESIT campus at night"
   - Highlighted issues with street lighting near the south entrance
   - Community members confirmed the problem and suggested solutions
   - Campus representative responded with action plan

2. **Thread**: "Self-defense workshop announcement"
   - Organized by the Student Welfare Committee
   - Scheduled for March 30, 2024, at the campus gymnasium
   - Registration details and participant questions

These forum implementations demonstrated:
1. Anonymous reporting capabilities
2. Location tagging for specific safety concerns
3. Community engagement metrics (42 likes on the workshop announcement)
4. Official responses from campus representatives

#### Emergency Response Coordination

During the fire alert simulation, the system coordinated the emergency response with real-time updates:

1. Campus security marked as "on-scene" within seconds of the alert
2. Fire department dispatched with ETA tracking
3. Medical services placed on standby
4. Evacuation status monitoring with assembly point coordination
5. Sequential updates as the situation evolved:
   - 14:26:45: Evacuation initiated
   - 14:30:12: Fire contained to a single room
   - 14:35:00: All personnel accounted for, no injuries

This comprehensive testing at ABESIT Ghaziabad validated the system's effectiveness in a real-world campus environment and provided valuable insights for further refinements. 